<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/context  
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    
	<!-- Shiro CacheManager: Ehcache -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager"/>
	</bean>

    <!-- CredentialsMatcher -->
    <bean id="credentialsMatcher" class="com.thomsonreuters.modules.am.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="shiroCacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- UserRealm -->
    <bean id="userRealm" class="com.thomsonreuters.modules.am.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    
    <!-- CasRealm -->
    <bean id="casRealm" class="com.thomsonreuters.modules.am.realm.MyCasRealm">
	    <property name="cachingEnabled" value="true"/>
	    <property name="authenticationCachingEnabled" value="true"/>
	    <property name="authenticationCacheName" value="authenticationCache"/>
	    <property name="authorizationCachingEnabled" value="true"/>
	    <property name="authorizationCacheName" value="authorizationCache"/>
	    <!--property name="defaultRoles" value="common"/>  
	    <property name="defaultPermissions" value="user:create,user:update"/> 
	    <property name="roleAttributeNames" value="roles"/>  
    	<property name="permissionAttributeNames" value="permissions"/-->
	    <property name="casServerUrlPrefix" value="${shiro.casServer.url}"/>
	    <property name="casService" value="${shiro.client.cas}"/>
	</bean>

    <!-- SessionIdGenerator -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- SessionIdCookie -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>
    
    <!-- RememberMeCookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="rememberMe"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="2592000"/><!-- 30 days -->  
	</bean> 

    <!-- SessionDAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="cacheManager" ref="shiroCacheManager" />
    </bean>

    <!-- SessionValidationScheduler -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- SessionManager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    
    <!-- RememberMeManager -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">  
	    <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>  
	    <property name="cookie" ref="rememberMeCookie"/>  
	</bean>
    
    <!-- CasSubjectFactory - RememberMe for Cas -->
    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory" /> 

    <!-- SecurityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!--property name="realm" ref="userRealm"/-->
        <property name="realm" ref="casRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="subjectFactory" ref="casSubjectFactory" />  
    </bean>
    
    <!-- SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    
    <!-- Filters -->
	<bean id="sysUserFilter" class="com.thomsonreuters.modules.am.web.shiro.filter.SysUserFilter"/>

	<bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
		<property name="port" value="8443"/>
	</bean>
	
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
	    <property name="failureUrl" value="/casFailure"/>
	</bean>
	
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
	    <property name="redirectUrl" value="${shiro.logout.url}"/>
	</bean>
	
    <!-- FormAuthenticationFilter -->
    <bean id="authcFilter" class="com.thomsonreuters.modules.am.filter.MyFormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <!--property name="loginUrl" value="/login"/-->
        <property name="failureKeyAttribute" value="shiroLoginFailure"/>
    </bean>

    <!-- Shiro Web Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="${shiro.login.url}"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <property name="successUrl" value="/" />  
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="authcFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
                <entry key="ssl" value-ref="sslFilter"/>
                <entry key="cas" value-ref="casFilter"/>
                <entry key="logout" value-ref="logoutFilter" />
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /static/** = anon
            	/unauthorized = anon
            	/casFailure = anon
            	/cas = cas
            	/login = anon
            	/loginAction = anon
                /logout = logout        
                /** = user, sysUser 
            </value>
        </property>
    </bean>

    <!-- Shiro lifecycleBeanProcessor -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>